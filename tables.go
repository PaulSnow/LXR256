package lxr

import (
	"fmt"
	"os"
	"io/ioutil"
)


// constants for building different sized lookup tables (ByteMap).  Right now, the lookup table is hard coded as
// a 1K table, but it can be far larger.
const(
	firstrand = 0x13ef13156da2756b
	Mapsiz    = 0x400
	MapMask   = Mapsiz - 1
)

// GenerateTable
// Build a table with a rather simplistic but with many passes, adequately randomly ordered bytes.
// We do some straight forward bitwise math to initialize and scramble our ByteMap.
func (w *LXRHash) GenerateTable() {

	// Our own "random" generator that really is just used to shuffle values
	rands := [Mapsiz]int{}
	offset := firstrand
	rand := func(i int) int {
		offset = offset ^ (i << 30) ^ offset<<7 ^ offset>>1&offset>>9 ^ rands[offset&(Mapsiz-1)]
		rands[i] = offset ^ rands[i]
		return rands[i] & (Mapsiz - 1)
	}

	// Fill the ByteMap with bytes ranging from 0 to 255.  As long as Mapsize%256 == 0, this
	// looping and masking works just fine.
	for i := range w.ByteMap {
		w.ByteMap[i] = byte(i)
	}

	// Now what we want to do is just mix it all up.  Take every byte in the ByteMap list, and exchange it
	// for some other byte in the ByteMap list. Note that we do this over and over, mixing and more mixing
	// the ByteMap, but maintaining the ratio of each byte value in the ByteMap list.
	for loops := 0; loops < 200000; loops++ {
		fmt.Println("Pass ", loops)
		for i := range w.ByteMap {
			j := rand(i)
			w.ByteMap[i], w.ByteMap[j] = w.ByteMap[j], w.ByteMap[i]
		}
	}
}

// WriteTable
// When playing around with the algorithm, it is nice to generate files and use them off the disk.  This
// allows the user to do that, and save the cost of regeneration between test runs.
func (w *LXRHash) WriteTable(filename string) {
	// Ah, the data file isn't good for us.  Delete it (if it exists)
	os.Remove(filename)

	// open output file
	fo, err := os.Create(filename)
	if err != nil {
		panic(err)
	}
	// close fo on exit and check for its returned error
	defer func() {
		if err := fo.Close(); err != nil {
			panic(err)
		}
	}()

	// write a chunk
	if _, err := fo.Write(w.ByteMap[:]); err != nil {
		panic(err)
	}

}

// ReadTable
// When a lookup table is on the disk, this will allow one to read it.
func (w *LXRHash) ReadTable(filename string) {

	// Try and load our byte map.
	dat, err := ioutil.ReadFile(filename)

	// If loading fails, or it is the wrong size, generate it.  Otherwise just use it.
	if err != nil || len(dat) != Mapsiz {
		w.GenerateTable()
		w.WriteTable(filename)
	} else {
		copy(w.ByteMap[:Mapsiz], dat)
	}

}

// Init()
// We use our own algorithm for initializing the map struct.  This is an fairly large table of
// byte values we use to map bytes to other byte values to enhance the avalanche nature of the hash
// as well as increase the memory footprint of the hash.
func (w *LXRHash) Init() {
	byteMap := []byte {
		0x9a, 0x0f, 0xc6, 0x61, 0xaa, 0x84, 0xd2, 0xcf, 0x80, 0x5c, 0x3f, 0x2a, 0x2a, 0xfe, 0x01, 0x21,
		0xc8, 0xa8, 0x00, 0xbb, 0xb0, 0x2f, 0xc0, 0x18, 0xc4, 0x32, 0x88, 0x52, 0xa4, 0xfa, 0x7a, 0x58,
		0x92, 0x73, 0xe6, 0xc7, 0x06, 0xdf, 0x0d, 0xd7, 0xc3, 0xdd, 0xe6, 0x30, 0x92, 0x38, 0x7d, 0x19,
		0xf0, 0xba, 0x41, 0x54, 0xb3, 0x22, 0xc7, 0x37, 0xd7, 0xc5, 0x1a, 0x89, 0xcf, 0x89, 0x60, 0x57,
		0x5b, 0x25, 0x7c, 0x3c, 0xf2, 0x26, 0x31, 0x29, 0x4c, 0x20, 0x3b, 0xe7, 0x46, 0x3d, 0xd6, 0xf7,
		0x25, 0x9b, 0xe3, 0x86, 0xf3, 0x49, 0xc5, 0x71, 0xf6, 0x5c, 0x94, 0xbd, 0x8f, 0x68, 0xcf, 0x47,
		0xea, 0x65, 0xa6, 0x6e, 0xda, 0x9f, 0xb7, 0xb9, 0x43, 0xb4, 0xb2, 0xa7, 0x33, 0x11, 0xd4, 0xe1,
		0xc0, 0xf0, 0x12, 0x4a, 0x42, 0xbc, 0x3d, 0x53, 0xab, 0xf9, 0x70, 0x74, 0x7f, 0x2f, 0xbe, 0x86,
		0xa9, 0x3c, 0xbe, 0x5d, 0x4e, 0x6a, 0xe9, 0xe8, 0x48, 0x16, 0x43, 0x0f, 0xf8, 0x9c, 0xb1, 0x5f,
		0xea, 0x6f, 0x03, 0x91, 0x69, 0x4f, 0xd6, 0x98, 0xe6, 0x5a, 0xb5, 0x96, 0x27, 0xbe, 0x4c, 0x1a,
		0x44, 0x48, 0x32, 0x09, 0xc6, 0xf8, 0xfe, 0x59, 0x63, 0xa2, 0x4b, 0x80, 0xc5, 0x7b, 0x55, 0xaa,
		0xb6, 0x68, 0x71, 0x4e, 0x7f, 0xed, 0x1a, 0x5d, 0x56, 0x7e, 0xe1, 0x75, 0xa7, 0x73, 0xfa, 0xc2,
		0x23, 0x69, 0x14, 0x1f, 0x97, 0xc5, 0x4d, 0x59, 0xf7, 0x2e, 0x1e, 0x89, 0xf0, 0xcd, 0x1a, 0x8f,
		0xe0, 0x6a, 0xcc, 0x9b, 0xd2, 0x6b, 0x87, 0x8b, 0xeb, 0x2b, 0xe2, 0x1f, 0x04, 0xd2, 0xf2, 0x0b,
		0x2c, 0x53, 0xad, 0xa8, 0xb9, 0xc8, 0xf3, 0x50, 0x6b, 0x80, 0x9e, 0xe1, 0x86, 0x03, 0xfd, 0xe2,
		0x36, 0x88, 0xdd, 0x19, 0x7b, 0x5c, 0x38, 0xd7, 0x21, 0x58, 0x12, 0x1d, 0xac, 0x20, 0xf8, 0xc9,
		0x05, 0x65, 0x41, 0xb2, 0x04, 0x8c, 0x1e, 0x62, 0x37, 0xef, 0x8c, 0x87, 0xd0, 0x81, 0x73, 0xe2,
		0xa1, 0x4e, 0xd9, 0x02, 0xf6, 0x27, 0xa4, 0x1e, 0x92, 0x9d, 0x7c, 0x1c, 0xfb, 0xac, 0xcb, 0x91,
		0x14, 0xbf, 0x38, 0xe2, 0x00, 0x0a, 0x29, 0x54, 0x1d, 0xff, 0x84, 0xe4, 0xfc, 0x75, 0xd3, 0xbb,
		0xec, 0xa9, 0x5f, 0xc2, 0xe5, 0x3c, 0x13, 0xd1, 0xdb, 0xd3, 0xdb, 0x2f, 0x20, 0xab, 0x60, 0x66,
		0x51, 0x68, 0x9d, 0x81, 0xf4, 0xd8, 0x81, 0xb0, 0xf7, 0xf1, 0x3d, 0xbf, 0x11, 0x46, 0x76, 0x5d,
		0xb5, 0x93, 0x97, 0x79, 0x46, 0xb6, 0x74, 0xcd, 0x56, 0xcb, 0x15, 0x45, 0x52, 0xb4, 0x05, 0x2e,
		0x0a, 0x6a, 0xe1, 0xdd, 0xbb, 0x02, 0x31, 0x4b, 0x7c, 0x68, 0x1f, 0x34, 0x3f, 0x61, 0xa5, 0x08,
		0x45, 0x8f, 0x75, 0x0b, 0xa5, 0x0e, 0xe7, 0x4a, 0x85, 0xe7, 0xe8, 0xc9, 0x85, 0x3a, 0xc1, 0x0c,
		0x82, 0xe4, 0x1b, 0xa0, 0x85, 0xce, 0xb9, 0xcf, 0xaa, 0x42, 0x07, 0x7e, 0xc8, 0xe0, 0x1b, 0x7f,
		0x8e, 0x9c, 0xf6, 0xdd, 0x18, 0x40, 0x04, 0x33, 0xe8, 0x63, 0xeb, 0xfe, 0xab, 0xef, 0xa3, 0x87,
		0xc7, 0x0f, 0xb7, 0x94, 0x05, 0x35, 0x82, 0xb8, 0x81, 0x52, 0x35, 0x6e, 0xcd, 0x16, 0x57, 0x71,
		0x10, 0x17, 0xdc, 0x64, 0x20, 0xa2, 0x2b, 0xb0, 0x33, 0x03, 0x38, 0x01, 0x28, 0x07, 0xc6, 0xf2,
		0xac, 0x6b, 0xd9, 0x7a, 0x23, 0x2a, 0xbd, 0xd0, 0x3a, 0x8a, 0xd1, 0xde, 0x77, 0x66, 0x0c, 0x45,
		0x76, 0x24, 0x36, 0x8a, 0x42, 0x69, 0x34, 0x49, 0x95, 0x2f, 0x8e, 0x4d, 0x5e, 0x92, 0x08, 0xf1,
		0x13, 0x22, 0xd0, 0xa4, 0x5e, 0x9e, 0xcc, 0x9d, 0x15, 0x0d, 0x86, 0x32, 0xb5, 0xb3, 0xf9, 0xf9,
		0x0a, 0x9c, 0xb4, 0x24, 0x9f, 0xc4, 0xfd, 0x65, 0x7e, 0xf4, 0x4f, 0x9b, 0x6f, 0xec, 0x89, 0x6d,
		0xa5, 0xfd, 0x30, 0x1d, 0x17, 0x43, 0x16, 0x79, 0x67, 0x78, 0x88, 0xba, 0xbc, 0xa6, 0xb2, 0xda,
		0xcd, 0x3e, 0x57, 0xc9, 0xe3, 0x6d, 0xaf, 0xe6, 0x8a, 0xb1, 0x63, 0x28, 0x22, 0x8e, 0xf3, 0x39,
		0xaa, 0x99, 0x8d, 0x94, 0xf1, 0x98, 0x32, 0x1c, 0x84, 0x00, 0x18, 0xd8, 0x7f, 0x26, 0x80, 0x36,
		0xb8, 0x0a, 0xd5, 0x4f, 0x99, 0x48, 0x27, 0x44, 0x26, 0x61, 0x39, 0x9a, 0x78, 0xf2, 0xfc, 0x48,
		0xc3, 0x5a, 0x3a, 0x51, 0xfb, 0xb4, 0xba, 0xff, 0xee, 0x79, 0xfc, 0x9c, 0x61, 0xed, 0xcb, 0xae,
		0x7c, 0x25, 0xdb, 0xdf, 0x6d, 0x8b, 0xcc, 0x17, 0x00, 0x6b, 0xc1, 0xa0, 0xfc, 0x53, 0xc3, 0x96,
		0x05, 0xe5, 0x1c, 0x90, 0xd4, 0xc4, 0x5e, 0x13, 0x50, 0xe0, 0x39, 0x54, 0x15, 0xee, 0xca, 0x0e,
		0xf4, 0x90, 0x97, 0xf0, 0xb8, 0xaf, 0x1b, 0xc8, 0xa3, 0x26, 0x31, 0x77, 0x4d, 0x71, 0xe5, 0x9e,
		0x40, 0xca, 0x8a, 0x3f, 0x5c, 0xa8, 0x9a, 0xfb, 0xff, 0xc1, 0x3e, 0x4a, 0x91, 0xf6, 0xd6, 0x55,
		0x6c, 0xd5, 0x6e, 0xf9, 0xfb, 0x35, 0x52, 0x10, 0x4d, 0xad, 0x70, 0xdb, 0x49, 0x90, 0x47, 0x30,
		0x9a, 0xe5, 0x5a, 0xe9, 0x0d, 0xe4, 0x3b, 0x98, 0xd2, 0xc0, 0x19, 0x44, 0xd5, 0xed, 0xa1, 0xa2,
		0x72, 0x46, 0xe3, 0x4f, 0x8c, 0x2b, 0x09, 0x06, 0x4c, 0x5b, 0x0c, 0x8e, 0xc3, 0x5e, 0x60, 0x56,
		0xee, 0xc2, 0x99, 0x59, 0xa3, 0x62, 0x93, 0xd6, 0xf7, 0x14, 0xa0, 0xec, 0x13, 0x02, 0x78, 0x06,
		0x82, 0xae, 0x17, 0xb5, 0x1d, 0x63, 0x93, 0x95, 0xea, 0x94, 0x21, 0xae, 0x2d, 0x62, 0xdc, 0xd9,
		0xa7, 0xf5, 0x83, 0x64, 0xea, 0x01, 0x2c, 0x4e, 0x55, 0xe3, 0x82, 0x9f, 0x12, 0xb6, 0xd5, 0x74,
		0x3a, 0x2a, 0x53, 0xc9, 0xff, 0x29, 0x37, 0x28, 0xec, 0x8d, 0xa5, 0x33, 0xb0, 0x21, 0x34, 0x04,
		0x49, 0x10, 0xa8, 0x78, 0x28, 0xf1, 0x65, 0x31, 0x3b, 0x90, 0x58, 0x3f, 0x83, 0xde, 0x66, 0x2e,
		0xfa, 0x35, 0x24, 0x59, 0xbc, 0x45, 0x97, 0x15, 0x98, 0xd4, 0x47, 0xac, 0xad, 0x41, 0x14, 0xf4,
		0xbd, 0xcb, 0xa3, 0x5d, 0x8b, 0x88, 0x99, 0xd8, 0x7d, 0xd9, 0x5b, 0x84, 0x30, 0xb2, 0xeb, 0xfd,
		0xd3, 0xee, 0x7d, 0xb1, 0x2c, 0xaf, 0xb9, 0x85, 0x6c, 0x83, 0xe9, 0x03, 0x47, 0x2d, 0x1e, 0x9e,
		0xde, 0xc2, 0x76, 0x7a, 0x42, 0x09, 0xf3, 0xe0, 0xf8, 0x8c, 0x4c, 0x60, 0x7e, 0x4b, 0x08, 0xb6,
		0x7a, 0x3c, 0x8d, 0xdc, 0xe9, 0x3d, 0xf5, 0xa2, 0xe8, 0xe4, 0xb3, 0xa1, 0x0b, 0x5a, 0xab, 0x2b,
		0x34, 0x10, 0x2d, 0x64, 0xa6, 0x67, 0x9d, 0x72, 0xed, 0x9f, 0xfa, 0xbc, 0x96, 0xad, 0xe7, 0x40,
		0x6a, 0x02, 0xd7, 0x77, 0xc6, 0x64, 0xca, 0x95, 0xd4, 0x19, 0x9b, 0xaf, 0xd1, 0x0f, 0x12, 0x72,
		0x08, 0x4a, 0x1f, 0x91, 0x1b, 0x01, 0xa6, 0x23, 0x0c, 0xbd, 0x83, 0x6f, 0x11, 0xa0, 0xfe, 0x6c,
		0x09, 0x8b, 0xda, 0xb3, 0x73, 0xa1, 0x66, 0xc7, 0x24, 0x29, 0x1c, 0x5f, 0xba, 0xa7, 0xdf, 0xc1,
		0x51, 0x74, 0xeb, 0xdf, 0x54, 0x6e, 0x23, 0x87, 0x93, 0x2c, 0x6d, 0xce, 0x07, 0x0d, 0x8d, 0xb7,
		0xf5, 0x25, 0x37, 0xca, 0x18, 0x70, 0x39, 0x70, 0x0e, 0x40, 0x0b, 0x55, 0x58, 0xa4, 0x27, 0x76,
		0x7b, 0xa9, 0x36, 0x3e, 0xda, 0xbb, 0x51, 0x95, 0x72, 0x16, 0x77, 0x75, 0x67, 0x67, 0x2e, 0xd1,
		0x11, 0xef, 0xd0, 0x2d, 0xd8, 0x22, 0xbf, 0xa9, 0xc0, 0x50, 0x7d, 0xce, 0xde, 0xef, 0x6c, 0x4b,
		0x5f, 0xdc, 0x56, 0xae, 0x8f, 0x57, 0x50, 0x5b, 0xf5, 0x7b, 0x3b, 0xce, 0xb1, 0x6f, 0x96, 0x06,
		0xc4, 0x43, 0xcc, 0x69, 0xb8, 0x0e, 0x07, 0xb7, 0x3e, 0xd3, 0x62, 0xbe, 0xbf, 0x41, 0x79, 0x44,
	}
	copy(w.ByteMap[:],byteMap)
}

